#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for datapower_domain
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = """
---
author: Tony Schneider
description: '&lt;p>An application domain contains the resources that support DataPower
  services. A DataPower supports multiple application domains. Application domains
  can share read access to files in their &lt;tt>local:&lt;/tt> directory. All application
  domains share the contents of the &lt;tt>store:&lt;/tt> directory.&lt;/p>&lt;p>After
  a user logs in to an application domain, everything the user does applies to only
  that application domain.&lt;/p>&lt;p>Except for the &lt;tt>default&lt;/tt> application
  domain, all application domains can be restarted independently. For the &lt;tt>default&lt;/tt>
  application domain, you must restart the DataPower Gateway. When an application
  domain or the DataPower Gateway is restarted, the persisted configuration is used.
  The persisted configuration can differ from the running configuration.&lt;/p>&lt;p>The
  configuration of an application domain can be locally stored or can be retrieved
  from a remote server. The use of a remote configuration file enables centralized
  management of application domains.&lt;/p>'
module: dp_domain
options:
  config:
    description: The provided configuration
    elements: dict
    suboptions:
      name:
        description: Name of the domain.
        type: str
      ConfigDir:
        default: config:///
        description: Indicates where the configuration file for this domain is stored.
          Note this property is read-only here. It is configured in the domain settings
          of the domain.
        type: str
      ConfigMode:
        choices:
        - local
        - import
        default: local
        description: Whether the configuration file is local or remote.
        type: str
      ConfigPermissionsMode:
        choices:
        - scope-domain
        - global-profile
        - specific-profile
        default: scope-domain
        description: Specifies the the security context for the configuration files
          that are run in the domain.
        type: str
      ConfigPermissionsProfile:
        description: When the configuration permissions mode is global access profile
          mode, specify a access profile that applies globally to all configuration
          files that are run in the domain.
        type: str
      DeploymentPolicy:
        description: The deployment policy to preprocess the remote configuration
          file during import.
        type: str
      DeploymentPolicyParameters:
        description: The collection of name-value pairs to replace variables in the
          deployment policy during import.
        type: str
      DomainUser:
        description: DEPRECATED -Specifies a set of CLI users having access to this
          domain. These users can log into this domain through the CLI. This setting
          can be superceded by an existing Access Policy of the user.
        elements: str
        type: list
      FileMap:
        suboptions:
          CopyFrom:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
          CopyTo:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
          Delete:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
          Display:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
          Exec:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
          Subdir:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
        description: '&lt;p>Which file permissions to apply to the &lt;tt>local:&lt;/tt>
          directory. When access permissions are defined in this configuration and
          with role-based management, users are granted the lesser privilege.&lt;/p>'
        type: dict
      ImportFormat:
        choices:
        - ZIP
        - XML
        default: ZIP
        description: The format of the remote configuration file.
        type: str
      ImportURL:
        description: The URL of the configuration file on the remote server.
        type: str
      LocalIPRewrite:
        choices:
        - 'on'
        - 'off'
        default: 'on'
        description: '&lt;p>Whether to rewrite local IP addresses during import. When
          enabled, local IP addresses in the import package are rewritten to match
          the local IP address on the DataPower Gateway. In other words, a service
          that binds to &lt;tt>eth10&lt;/tt> in the import package is rewritten to
          bind to the local IP address of &lt;tt>eth10&lt;/tt> on the DataPower Gateway.&lt;/p>'
        type: str
      MaxChkpoints:
        default: 3
        description: The maximum number of configuration checkpoints to support.
        type: int
      MonitoringMap:
        suboptions:
          Audit:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
          Log:
            description: on or off
            type: str
            choices:
              - "on"
              - "off"
        description: '&lt;p>Which types of events to generate when files are added
          to or deleted from the &lt;tt>local:&lt;/tt> directory.&lt;/p>'
        type: dict
      NeighborDomain:
        default: default
        description: '&lt;p>Which application domains have their &lt;tt>local:&lt;/tt>
          directory visible to this application domain.&lt;/p>&lt;p>References to
          visible application domains are explicit, not bidirectional. If application
          domain &lt;tt>domainB&lt;/tt> is made visible to application domain &lt;tt>domainA&lt;/tt>
          , the following conditions apply.&lt;/p>&lt;ul>&lt;li>Application domain
          &lt;tt>domainA&lt;/tt> has read-only access to the &lt;tt>local:&lt;/tt>
          directory of application domain &lt;tt>domainB&lt;/tt> .&lt;/li>&lt;li>Application
          domain &lt;tt>domainB&lt;/tt> cannot see application domain &lt;tt>domainA&lt;/tt>
          .&lt;/li>&lt;/ul>&lt;p>In this case, you cannot make application domain
          &lt;tt>domainA&lt;/tt> visible to application domain &lt;tt>domainB&lt;/tt>
          . References to visible application domains cannot be circular.&lt;/p>'
        elements: str
        type: list
      UserSummary:
        description: A descriptive summary for the configuration.
        type: str
      mAdminState:
        choices:
        - enabled
        - disabled
        default: enabled
        description: '&lt;p>The administrative state of the configuration.&lt;/p>&lt;ul>&lt;li>To
          make active, set to enabled.&lt;/li>&lt;li>To make inactive, set to disabled.&lt;/li>&lt;/ul>'
        type: str
    type: list
  state:
    choices:
    - merged
    - replaced
    - overriden
    - deleted
    default: merged
    description:
    - The state the configuration should be left in
    type: str
short_description: Manages configuration of DataPower domain
version_added: '2.9'
"""
EXAMPLES = """
# Using deleted

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  myos_interfaces:
    operation: deleted

<placeholder for the configuration example after module invocation>


# Using merged

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  nxos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: merged

<placeholder for the configuration example after module invocation>


# Using overridden

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  myos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: overridden

<placeholder for the configuration example after module invocation>


# Using replaced

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  nxos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: replaced

<placeholder for the configuration example after module invocation>


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.community.datapower.plugins.module_utils.network.datapower.argspec.domain.domain import DomainArgs
from ansible_collections.community.datapower.plugins.module_utils.network.datapower.config.domain.domain import Domain


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=DomainArgs.argument_spec,
                           supports_check_mode=True)

    result = Domain(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
